"""
A Tenant allow us to restrict and filter access to all entities.
A Tenant can have 3 kinds of user:
    - The tenant owner: the user who create the tenant and can do everything.
    - The tenant guest: a user which has been invited by the owner to manage the tenant entities.
    - The tenant end user: a user which has been invited by the owner or the guest and can use the tenant entities.
A tenant can have only one owner.
When generate token the identityClaim will be added as follow:
    - Owner User: ownerTenantId
    - Guest User: guestTenantId
    - End User: tenantId
The tenant could contains all project settings. (eg: payment, api integrations, ect ...).
"""
type Tenant
  @model
  @key(name: "tenantByUserAndUpdateAt", fields: ["userId", "updatedAt"], queryField: "getTenantByUserAndUpdateAt")
  @auth(
    rules: [
      # Allow the ADMIN to do all
      { allow: groups, groups: ["ADMIN"], operations: [create, update, delete, read] }
      # Allow the owner to do all
      { allow: owner, ownerField: "userId", operations: [create, update, delete, read] }
      # Allow the user which have choose this tenant in its preferences to read it
      { allow: owner, identityClaim: "tenantId", ownerField: "id", operations: [read] }
    ]
  ) {
  """
  The tenant Id
  """
  id: ID!
  """
  The user Id of the owner of the tenant
  """
  userId: String!
  """
  The cognito user details (email, phone, ...)
  """
  cognitoUser: CognitoUser @function(name: "SERVERLESSNINJA_GetCognitoUser-${env}")
  """
  The tenant title
  """
  title: String!
  """
  The last updated Date
  """
  updatedAt: AWSDateTime
}

"""
The current tenant choose by an user.
The users can switch between the tenant they can see.
This will be used during the token generation to add custom attributes to the id token.
If the preferences does not exists, it will be created during the token generation.
"""
type TenantUserPreference
  @model
  @key(fields: ["userId"])
  @auth(
    rules: [
      # Allow the owner to do update his tenant id to switch between tenant (need refresh token)
      { allow: owner, ownerField: "userId", operations: [update] }
    ]
  ) {
  """
  The user Id
  """
  userId: String!
  """
  The tenant id the users belongs to
  """
  tenantId: ID
}

"""
The list of guest users for each tenant.
Only if you are owner of the tenant you can add users to the tenant.
If you are guest of the tenant, you can see the others guest users.
"""
type GuestUser
  @model(mutations: null, subscriptions: null)
  @key(fields: ["tenantId", "userId"])
  @key(name: "GuestUserByUserId", fields: ["userId", "updatedAt"], queryField: "getGuestUserByUserId")
  @auth(
    rules: [
      # Allow the owner of tenant to do all
      { allow: owner, identityClaim: "ownerTenantId", ownerField: "tenantId", operations: [create, update, delete, read] }
      # Allow the guest user of the tenant to read
      { allow: owner, identityClaim: "guestTenantId", ownerField: "tenantId", operations: [read] }
    ]
  ) {
  """
  The tenant id the users belongs to
  """
  tenantId: ID!
  """
  The user id of the guest user
  """
  userId: String!
  """
  The cognito user details (email, phone, ...)
  """
  cognitoUser: CognitoUser @function(name: "SERVERLESSNINJA_GetCognitoUser-${env}")
  """
  The last updated Date
  """
  updatedAt: AWSDateTime
  """
  The tenant for this guest user
  """
  tenant: Tenant @connection(fields: ["tenantId"])
}

"""
The end user who can access to the tenant entities
The end user cannot switch to others tenants
The owner and guest user can manage the end user
"""
type EndUser
  @model(mutations: null, subscriptions: null)
  @key(fields: ["userId"])
  @key(name: "EndUserByTenant", fields: ["tenantId", "updatedAt"], queryField: "getEndUserByTenant")
  @auth(
    rules: [
      # Allow the owner of tenant to do all
      { allow: owner, identityClaim: "ownerTenantId", ownerField: "tenantId", operations: [create, update, delete, read] }
      # Allow the guest user of the tenant to all
      { allow: owner, identityClaim: "guestTenantId", ownerField: "tenantId", operations: [create, update, delete, read] }
    ]
  ) {
  """
  The tenant id the users belongs to
  """
  tenantId: ID!
  """
  The user id of the end user
  """
  userId: String!
  """
  The cognito user details (email, phone, ...)
  """
  cognitoUser: CognitoUser @function(name: "SERVERLESSNINJA_GetCognitoUser-${env}")
  """
  The last updated Date
  """
  updatedAt: AWSDateTime
}

type CognitoUser {
  email: String
  phone: String
  createdDate: AWSDateTime
  lastModifiedDate: AWSDateTime
  enabled: Boolean
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
  protectedIdentityId: String
}

input CreateGuestUserInput {
  emailOrPhone: String!
  tenantId: String!
}

input UpdateGuestUserInput {
  userId: String!
  enabled: Boolean
}

input DeleteGuestUserInput {
  userId: String!
}

input CreateEndUserInput {
  emailOrPhone: String!
  tenantId: String!
}

input UpdateEndUserInput {
  userId: String!
  enabled: Boolean
}

input DeleteEndUserInput {
  userId: String!
}

type Mutation {
  createGuestUser(input: CreateGuestUserInput!): GuestUser @function(name: "SERVERLESSNINJA_ManageGuestUser-${env}")
  updateGuestUser(input: UpdateGuestUserInput!): GuestUser @function(name: "SERVERLESSNINJA_ManageGuestUser-${env}")
  deleteGuestUser(input: DeleteGuestUserInput!): GuestUser @function(name: "SERVERLESSNINJA_ManageGuestUser-${env}")
  createEndUser(input: CreateEndUserInput!): EndUser @function(name: "SERVERLESSNINJA_ManageEndUser-${env}")
  updateEndUser(input: UpdateEndUserInput!): EndUser @function(name: "SERVERLESSNINJA_ManageEndUser-${env}")
  deleteEndUser(input: DeleteEndUserInput!): EndUser @function(name: "SERVERLESSNINJA_ManageEndUser-${env}")
}
